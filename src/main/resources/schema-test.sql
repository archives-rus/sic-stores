CREATE TABLE IF NOT EXISTS DESC_DATATYPE (
	DATATYPE_CODE VARCHAR(30) NOT NULL PRIMARY KEY, 
	TYPE_NAME VARCHAR(100) NOT NULL, 
	SORT_ORDER int(5) NOT NULL 
);

CREATE TABLE IF NOT EXISTS CORE_SUBSYSTEM (	
	SUBSYSTEM_NUMBER int(10) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NAME VARCHAR(300) NOT NULL, 
	SUBSYSTEM_CODE VARCHAR(30) NOT NULL
);

CREATE TABLE IF NOT EXISTS CORE_PARAMETER (	
	PARAMETER_CODE VARCHAR(30) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NUMBER int(10) NOT NULL, 
	PARAMETER_NAME VARCHAR(250) NOT NULL, 
	PARAMETER_DESCRIPTION VARCHAR(1000), 
	PARAMETER_VALUE VARCHAR(4000) NOT NULL, 
	FOREIGN KEY (SUBSYSTEM_NUMBER) REFERENCES CORE_SUBSYSTEM (SUBSYSTEM_NUMBER)
); 

CREATE TABLE IF NOT EXISTS DESCRIPTOR_GROUP (
	DESCRIPTOR_GROUP_ID int(10) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NUMBER int(10), 
	GROUP_NAME VARCHAR(300) NOT NULL, 
	GROUP_CODE VARCHAR(30), 
	SORT_ORDER int(5) NOT NULL, 
	IS_SYSTEM int(1) NOT NULL, 
	IS_HIERARCHICAL int(1) NOT NULL, 
	SHORT_VALUE_SUPPORTED int(1) NOT NULL, 
	ALPHABETIC_SORT int(1) NOT NULL, 
	FOREIGN KEY (SUBSYSTEM_NUMBER) REFERENCES CORE_SUBSYSTEM (SUBSYSTEM_NUMBER)
);

CREATE TABLE IF NOT EXISTS DESCRIPTOR_GROUP_ATTR (	
	DESCRIPTOR_GROUP_ATTR_ID int(10) NOT NULL PRIMARY KEY, 
	DESCRIPTOR_GROUP_ID int(10) NOT NULL, 
	DATATYPE_CODE VARCHAR(30) NOT NULL, 
	ATTR_NAME VARCHAR(300) NOT NULL, 
	ATTR_CODE VARCHAR(30) NOT NULL, 
	SORT_ORDER int(5) NOT NULL, 
	IS_COLLECTION int(1) NOT NULL, 
	IS_REQUIRED int(1) NOT NULL, 
	REF_DESCRIPTOR_GROUP_ID int(10), 
	FOREIGN KEY (DESCRIPTOR_GROUP_ID) REFERENCES DESCRIPTOR_GROUP (DESCRIPTOR_GROUP_ID), 
	FOREIGN KEY (REF_DESCRIPTOR_GROUP_ID) REFERENCES DESCRIPTOR_GROUP (DESCRIPTOR_GROUP_ID), 
	FOREIGN KEY (DATATYPE_CODE) REFERENCES DESC_DATATYPE (DATATYPE_CODE)
);

CREATE TABLE IF NOT EXISTS DESCRIPTOR_VALUE (
	DESCRIPTOR_VALUE_ID int(10) NOT NULL PRIMARY KEY, 
	DESCRIPTOR_GROUP_ID int(10) NOT NULL, 
	FULL_VALUE VARCHAR(4000) NOT NULL, 
	SHORT_VALUE VARCHAR(250), 
	VALUE_CODE VARCHAR(30), 
	SORT_ORDER int(10) NOT NULL, 
	PARENT_VALUE_ID int(10), 
	FOREIGN KEY (DESCRIPTOR_GROUP_ID) REFERENCES DESCRIPTOR_GROUP (DESCRIPTOR_GROUP_ID), 
	FOREIGN KEY (PARENT_VALUE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
); 

CREATE TABLE IF NOT EXISTS DESCRIPTOR_VALUE_ATTR (
	DESCRIPTOR_VALUE_ATTR_ID int(10) NOT NULL PRIMARY KEY, 
	DESCRIPTOR_VALUE_ID int(10) NOT NULL, 
	DESCRIPTOR_GROUP_ATTR_ID int(10) NOT NULL, 
	ATTR_VALUE VARCHAR(4000), 
	REF_DESCRIPTOR_VALUE_ID int(10), 
	FOREIGN KEY (DESCRIPTOR_GROUP_ATTR_ID) REFERENCES DESCRIPTOR_GROUP_ATTR (DESCRIPTOR_GROUP_ATTR_ID), 
	FOREIGN KEY (DESCRIPTOR_VALUE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID) ON DELETE CASCADE, 
	FOREIGN KEY (REF_DESCRIPTOR_VALUE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
); 

CREATE TABLE IF NOT EXISTS ADM_USER (
	USER_ID int(10) NOT NULL PRIMARY KEY, 
	USER_TYPE_ID int(10) NOT NULL, 
	LOGIN VARCHAR(30) NOT NULL UNIQUE, 
	PASSWORD VARCHAR(100) NOT NULL, 
	IS_BLOCKED int(1) NOT NULL, 
	DISPLAYED_NAME VARCHAR(150) NOT NULL, 
	FOREIGN KEY (USER_TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
); 

CREATE TABLE IF NOT EXISTS ADM_GROUP (
	GROUP_ID int(10) NOT NULL PRIMARY KEY, 
	GROUP_NAME VARCHAR(250) NOT NULL UNIQUE, 
	GROUP_NOTE VARCHAR(1000) 
);


CREATE TABLE IF NOT EXISTS ADM_USER_GROUP (	
	USER_ID int(10) NOT NULL, 
	GROUP_ID int(10) NOT NULL, 
	PRIMARY KEY (USER_ID, GROUP_ID),
	FOREIGN KEY (GROUP_ID) REFERENCES ADM_GROUP (GROUP_ID), 
	FOREIGN KEY (USER_ID) REFERENCES ADM_USER (USER_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ADM_ACCESS_RULE (
	ACCESS_RULE_ID int(10) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NUMBER int(10) NOT NULL, 
	RULE_CODE VARCHAR(30) NOT NULL, 
	RULE_NAME VARCHAR(250) NOT NULL, 
	FOREIGN KEY (SUBSYSTEM_NUMBER) REFERENCES CORE_SUBSYSTEM(SUBSYSTEM_NUMBER)
);

CREATE TABLE IF NOT EXISTS ADM_GROUP_RULE (
	GROUP_ID int(10) NOT NULL, 
	ACCESS_RULE_ID int(10) NOT NULL, 
	PRIMARY KEY (GROUP_ID, ACCESS_RULE_ID),
	FOREIGN KEY (ACCESS_RULE_ID) REFERENCES ADM_ACCESS_RULE (ACCESS_RULE_ID), 
	FOREIGN KEY (GROUP_ID) REFERENCES ADM_GROUP (GROUP_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ADM_EMPLOYEE (
	EMPLOYEE_ID int(10) NOT NULL PRIMARY KEY, 
	USER_ID int(10), 
	DEPARTMENT_ID int(10) NOT NULL, 
	POSITION_ID int(10) NOT NULL, 
	LAST_NAME VARCHAR(150) NOT NULL, 
	FIRST_NAME VARCHAR(150) NOT NULL, 
	MIDDLE_NAME VARCHAR(150), 
	FOREIGN KEY (USER_ID) REFERENCES ADM_USER (USER_ID) ON DELETE CASCADE, 
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID), 
	FOREIGN KEY (POSITION_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
);

CREATE TABLE IF NOT EXISTS STRG_PLACE_ARCHIVE (	
	STRG_PLACE_ARCH_ID int(10) NOT NULL PRIMARY KEY, 
	ARCHIVE_ID int(10) NOT NULL, 
	ADDRESS VARCHAR(250) NOT NULL, 
	PHONE_NUMBER VARCHAR(100), 
	FOREIGN KEY (ARCHIVE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
);

CREATE TABLE IF NOT EXISTS STRG_FUND (
	FUND_ID int(10) NOT NULL PRIMARY KEY, 
	ARCHIVE_ID int(10) NOT NULL, 
	FUND_NUM int(5) NOT NULL, 
	PREFIX VARCHAR(4), 
	SUFFIX VARCHAR(4), 
	FUND_NAME VARCHAR(4000) NOT NULL, 
	EDGE_DATES VARCHAR(50), 
	UNIQUE (ARCHIVE_ID, FUND_NUM, PREFIX, SUFFIX),
	FOREIGN KEY (ARCHIVE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
);

CREATE TABLE IF NOT EXISTS STRG_ORGANIZATION (
	ORGANIZATION_ID int(10) NOT NULL PRIMARY KEY, 
	ARCHIVE_ID int(10) NOT NULL, 
	FUND_ID int(10), 
	BUSINESS_TRIPS_INFO VARCHAR(4000), 
	REWARDS_INFO VARCHAR(4000), 
	NOTES VARCHAR(4000), 
	ADD_USER_ID int(10) NOT NULL, 
	MOD_USER_ID int(10) NOT NULL, 
	INSERT_DATE DATETIME NOT NULL, 
	LAST_UPDATE_DATE DATETIME NOT NULL, 
	FOREIGN KEY (ADD_USER_ID) REFERENCES ADM_USER (USER_ID), 
	FOREIGN KEY (ARCHIVE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID), 
	FOREIGN KEY (MOD_USER_ID) REFERENCES ADM_USER (USER_ID), 
	FOREIGN KEY (FUND_ID) REFERENCES STRG_FUND (FUND_ID)
);

CREATE TABLE IF NOT EXISTS STRG_PLACE_ORG (
	STRG_PLACE_ORG_ID int(10) NOT NULL PRIMARY KEY, 
	STRG_PLACE_ARCH_ID int(10), 
	ORGANIZATION_ID int(10) NOT NULL, 
	ORG_NAME VARCHAR(4000), 
	ADDRESS VARCHAR(250) NOT NULL, 
	PHONE_NUMBER VARCHAR(100), 
	DOCUMENT_COUNT int(19), 
	BEGIN_YEAR int(4), 
	END_YEAR int(4), 
	CONTENTS VARCHAR(4000), 
	FOREIGN KEY (ORGANIZATION_ID) REFERENCES STRG_ORGANIZATION (ORGANIZATION_ID) ON DELETE CASCADE, 
	FOREIGN KEY (STRG_PLACE_ARCH_ID) REFERENCES STRG_PLACE_ARCHIVE (STRG_PLACE_ARCH_ID)
); 

CREATE TABLE IF NOT EXISTS STRG_DOC_CONTENTS (
	DOC_CONTENTS_ID int(10) NOT NULL PRIMARY KEY, 
	STRG_PLACE_ORG_ID int(10) NOT NULL, 
	DOC_TYPE_ID int(10), 
	DATES VARCHAR(250), 
	SERIES VARCHAR(250), 
	CASE_COUNT int(19), 
	FOREIGN KEY (DOC_TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID), 
	FOREIGN KEY (STRG_PLACE_ORG_ID) REFERENCES STRG_PLACE_ORG (STRG_PLACE_ORG_ID) ON DELETE CASCADE
); 

CREATE TABLE IF NOT EXISTS STRG_ORG_NAME (
	ORG_NAME_ID int(10) NOT NULL PRIMARY KEY, 
	ORGANIZATION_ID int(10) NOT NULL, 
	FULL_NAME VARCHAR(4000) NOT NULL, 
	SHORT_NAME VARCHAR(300), 
	SUBORDINATION VARCHAR(300), 
	EDGE_DATES VARCHAR(30), 
	SORT_ORDER int(5) NOT NULL, 
	FOREIGN KEY (ORGANIZATION_ID) REFERENCES STRG_ORGANIZATION (ORGANIZATION_ID) ON DELETE CASCADE
);

CREATE ALIAS IF NOT EXISTS MD5 FOR "org.apache.commons.codec.digest.DigestUtils.md5Hex(java.lang.String)";

CREATE SEQUENCE IF NOT EXISTS SEQ_STRG_DOC_CONTENTS START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_STRG_FUND START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_STRG_ORG_NAME START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_STRG_ORGANIZATION START WITH 2 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_STRG_PLACE_ARCHIVE START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_STRG_PLACE_ORG START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;