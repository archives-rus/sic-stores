
CREATE TABLE IF NOT EXISTS CORE_SUBSYSTEM (	
    SUBSYSTEM_NUMBER INT(10) NOT NULL PRIMARY KEY, 
    SUBSYSTEM_NAME VARCHAR(300) NOT NULL, 
    SUBSYSTEM_CODE VARCHAR(30) NOT NULL
);

CREATE TABLE IF NOT EXISTS ADM_ACCESS_RULE(
	ACCESS_RULE_ID INT(10) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NUMBER INT(10) NOT NULL, 
	RULE_CODE VARCHAR(30) NOT NULL, 
	RULE_NAME VARCHAR(250) NOT NULL, 
	FOREIGN KEY (SUBSYSTEM_NUMBER) REFERENCES CORE_SUBSYSTEM(SUBSYSTEM_NUMBER)
);  

CREATE TABLE IF NOT EXISTS DESCRIPTOR_GROUP (
	DESCRIPTOR_GROUP_ID INT(10) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NUMBER INT(10), 
	GROUP_NAME VARCHAR(300) NOT NULL, 
	GROUP_CODE VARCHAR(30), 
	SORT_ORDER INT(5) NOT NULL, 
	IS_SYSTEM INT(1) NOT NULL, 
	IS_HIERARCHICAL INT(1) NOT NULL, 
	SHORT_VALUE_SUPPORTED INT(1) NOT NULL, 
	ALPHABETIC_SORT INT(1) NOT NULL, 
	FOREIGN KEY (SUBSYSTEM_NUMBER) REFERENCES CORE_SUBSYSTEM (SUBSYSTEM_NUMBER)
);

CREATE TABLE IF NOT EXISTS DESCRIPTOR_VALUE (
	DESCRIPTOR_VALUE_ID INT(10) NOT NULL PRIMARY KEY, 
	DESCRIPTOR_GROUP_ID INT(10) NOT NULL, 
	FULL_VALUE VARCHAR(4000) NOT NULL, 
	SHORT_VALUE VARCHAR(250), 
	VALUE_CODE VARCHAR(30), 
	SORT_ORDER INT(10) NOT NULL, 
	PARENT_VALUE_ID INT(10), 
	FOREIGN KEY (DESCRIPTOR_GROUP_ID) REFERENCES DESCRIPTOR_GROUP (DESCRIPTOR_GROUP_ID), 
	FOREIGN KEY (PARENT_VALUE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
); 

CREATE TABLE IF NOT EXISTS ADM_USER (
	USER_ID INT(10) NOT NULL PRIMARY KEY, 
	USER_TYPE_ID INT(10) NOT NULL, 
	LOGIN VARCHAR(30) NOT NULL UNIQUE, 
	PASSWORD VARCHAR(100) NOT NULL, 
	IS_BLOCKED INT(1) NOT NULL, 
	DISPLAYED_NAME VARCHAR(150) NOT NULL, 
	FOREIGN KEY (USER_TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
); 

CREATE TABLE IF NOT EXISTS ADM_EMPLOYEE (
	EMPLOYEE_ID INT(10) NOT NULL PRIMARY KEY, 
	USER_ID INT(10), 
	DEPARTMENT_ID INT(10) NOT NULL, 
	POSITION_ID INT(10) NOT NULL, 
	LAST_NAME VARCHAR(150) NOT NULL, 
	FIRST_NAME VARCHAR(150) NOT NULL, 
	MIDDLE_NAME VARCHAR(150), 
	FOREIGN KEY (USER_ID) REFERENCES ADM_USER (USER_ID) ON DELETE CASCADE, 
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID), 
	FOREIGN KEY (POSITION_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
);

CREATE TABLE IF NOT EXISTS ADM_GROUP (
	GROUP_ID INT(10) NOT NULL PRIMARY KEY, 
	GROUP_NAME VARCHAR(250) NOT NULL UNIQUE, 
	GROUP_NOTE VARCHAR(1000) 
);

CREATE TABLE IF NOT EXISTS DESC_DATATYPE (
	DATATYPE_CODE VARCHAR(30) NOT NULL PRIMARY KEY, 
	TYPE_NAME VARCHAR(100) NOT NULL, 
	SORT_ORDER INT(5) NOT NULL 
);

CREATE TABLE IF NOT EXISTS CORE_PARAMETER (	
	PARAMETER_CODE VARCHAR(30) NOT NULL PRIMARY KEY, 
	SUBSYSTEM_NUMBER INT(10) NOT NULL, 
	PARAMETER_NAME VARCHAR(250) NOT NULL, 
	PARAMETER_DESCRIPTION VARCHAR(1000), 
	PARAMETER_VALUE VARCHAR(4000) NOT NULL, 
	FOREIGN KEY (SUBSYSTEM_NUMBER) REFERENCES CORE_SUBSYSTEM (SUBSYSTEM_NUMBER)
); 

CREATE TABLE IF NOT EXISTS DESCRIPTOR_GROUP_ATTR (	
	DESCRIPTOR_GROUP_ATTR_ID INT(10) NOT NULL PRIMARY KEY, 
	DESCRIPTOR_GROUP_ID INT(10) NOT NULL, 
	DATATYPE_CODE VARCHAR(30) NOT NULL, 
	ATTR_NAME VARCHAR(300) NOT NULL, 
	ATTR_CODE VARCHAR(30) NOT NULL, 
	SORT_ORDER INT(5) NOT NULL, 
	IS_COLLECTION INT(1) NOT NULL, 
	IS_REQUIRED INT(1) NOT NULL, 
	REF_DESCRIPTOR_GROUP_ID INT(10), 
	FOREIGN KEY (DESCRIPTOR_GROUP_ID) REFERENCES DESCRIPTOR_GROUP (DESCRIPTOR_GROUP_ID), 
	FOREIGN KEY (REF_DESCRIPTOR_GROUP_ID) REFERENCES DESCRIPTOR_GROUP (DESCRIPTOR_GROUP_ID), 
	FOREIGN KEY (DATATYPE_CODE) REFERENCES DESC_DATATYPE (DATATYPE_CODE)
);

CREATE TABLE IF NOT EXISTS DESCRIPTOR_VALUE_ATTR (
	DESCRIPTOR_VALUE_ATTR_ID INT(10) NOT NULL PRIMARY KEY, 
	DESCRIPTOR_VALUE_ID INT(10) NOT NULL, 
	DESCRIPTOR_GROUP_ATTR_ID INT(10) NOT NULL, 
	ATTR_VALUE VARCHAR(4000), 
	REF_DESCRIPTOR_VALUE_ID INT(10), 
	FOREIGN KEY (DESCRIPTOR_GROUP_ATTR_ID) REFERENCES DESCRIPTOR_GROUP_ATTR (DESCRIPTOR_GROUP_ATTR_ID), 
	FOREIGN KEY (DESCRIPTOR_VALUE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID) ON DELETE CASCADE, 
	FOREIGN KEY (REF_DESCRIPTOR_VALUE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
); 

CREATE TABLE IF NOT EXISTS ADM_USER_GROUP (	
	USER_ID INT(10) NOT NULL, 
	GROUP_ID INT(10) NOT NULL, 
	PRIMARY KEY (USER_ID, GROUP_ID),
	FOREIGN KEY (GROUP_ID) REFERENCES ADM_GROUP (GROUP_ID), 
	FOREIGN KEY (USER_ID) REFERENCES ADM_USER (USER_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ADM_GROUP_RULE (
	GROUP_ID INT(10) NOT NULL, 
	ACCESS_RULE_ID INT(10) NOT NULL, 
	PRIMARY KEY (GROUP_ID, ACCESS_RULE_ID),
	FOREIGN KEY (ACCESS_RULE_ID) REFERENCES ADM_ACCESS_RULE (ACCESS_RULE_ID), 
	FOREIGN KEY (GROUP_ID) REFERENCES ADM_GROUP (GROUP_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SP_ORGANIZATION (
    ORGANIZATION_ID INT(19) NOT NULL PRIMARY KEY, 
	ADD_USER_ID INT(10) NOT NULL, 
	MOD_USER_ID INT(10) NOT NULL, 
	INSERT_DATE DATETIME NOT NULL, 
	LAST_UPDATE_DATE DATETIME NOT NULL,
	FOREIGN KEY (ADD_USER_ID) REFERENCES ADM_USER (USER_ID),
	FOREIGN KEY (MOD_USER_ID) REFERENCES ADM_USER (USER_ID)
);

CREATE TABLE IF NOT EXISTS SP_CHANGE_OPERATION (
    OPERATION_ID INT(19) NOT NULL PRIMARY KEY, 
    ORGANIZATION_ID INT(19) NOT NULL, 
    USER_ID INT(19) NOT NULL, 
    OP_DATE DATETIME NOT NULL, 
    ACTION_ID INT(19) NOT NULL, 
	FOREIGN KEY (ACTION_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID), 
	FOREIGN KEY (USER_ID) REFERENCES ADM_USER (USER_ID), 
	FOREIGN KEY (ORGANIZATION_ID) REFERENCES SP_ORGANIZATION (ORGANIZATION_ID) 
);
 
CREATE TABLE IF NOT EXISTS SP_CHANGE_FIELD (
    FIELD_ID INT(19) NOT NULL PRIMARY KEY, 
    NAME VARCHAR(255) NOT NULL, 
    NEW_VALUE VARCHAR(4000), 
    OLD_VALUE VARCHAR(4000), 
    PARENT_ID INT(19), 
    OPERATION_ID INT(19),
    FOREIGN KEY (PARENT_ID) REFERENCES SP_CHANGE_FIELD (FIELD_ID),
    FOREIGN KEY (OPERATION_ID) REFERENCES SP_CHANGE_OPERATION (OPERATION_ID)
);

CREATE TABLE IF NOT EXISTS SP_PLACE (
	PLACE_ID INT(19) NOT NULL PRIMARY KEY, 
	TYPE_ID INT(19) NOT NULL, 
	ARCHIVE_ID INT(19), 
	LEVEL_ID INT(19), 
	ARCHIVE_ADDRESS INT(19), 
	ORG_ADDRESS VARCHAR(255), 
	FUND_PREFIX VARCHAR(20), 
	FUND_NUMBER INT(10), 
	FUND_SUFFIX VARCHAR(20), 
	ARCHIVE_PHONE INT(19), 
	ORG_PHONE VARCHAR(255), 
	FUND_NAME VARCHAR(255), 
	EMAIL VARCHAR(255), 
	START_YEAR INT(5), 
	END_YEAR INT(5), 
	STORE_ARCHIVE VARCHAR(255), 
	UNITS_COUNT INT(10), 
	ORGANIZATION_ID INT(19) NOT NULL, 
	ADD_INFO VARCHAR(4000), 
	REMARK VARCHAR(4000),
    FOREIGN KEY (TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID),
    FOREIGN KEY (ARCHIVE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID),
    FOREIGN KEY (ARCHIVE_ADDRESS) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID),
    FOREIGN KEY (ORGANIZATION_ID) REFERENCES SP_ORGANIZATION (ORGANIZATION_ID),
    FOREIGN KEY (ARCHIVE_PHONE) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID)
);

CREATE TABLE IF NOT EXISTS SP_DOCUMENT (
    DOCUMENT_ID INT(19) NOT NULL PRIMARY KEY, 
	PLACE_ID INT(19) NOT NULL, 
	TYPE_ID INT(19), 
	START_DATE INT(5), 
	END_DATE INT(5), 
	OPIS_NUMBER INT(10), 
	DOCS_COUNT INT(10), 
	SORT INT(19) NOT NULL,
    FOREIGN KEY (TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID),
    FOREIGN KEY (PLACE_ID) REFERENCES SP_PLACE (PLACE_ID)
);

CREATE TABLE IF NOT EXISTS SP_NAME (
    NAME_ID INT(19) NOT NULL PRIMARY KEY, 
	FULL_NAME VARCHAR(4000) NOT NULL, 
	SHORT_NAME VARCHAR(4000), 
	SUBORDINATION VARCHAR(4000), 
	DATES VARCHAR(100),
	SORT INT(19) NOT NULL, 
	ORGANIZATION_ID INT(19) NOT NULL,
    FOREIGN KEY (ORGANIZATION_ID) REFERENCES SP_ORGANIZATION (ORGANIZATION_ID)
);

CREATE TABLE IF NOT EXISTS SP_REWARD (
    REWARD_ID INT(19) NOT NULL PRIMARY KEY, 
    TYPE_ID INT(19), 
    START_DATE INT(5), 
    END_DATE INT(5), 
    OPIS_NUMBER INT(10), 
    DOCS_COUNT INT(10), 
    SORT INT(19) NOT NULL, 
    PLACE_ID INT(19) NOT NULL,
    FOREIGN KEY (TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID),
    FOREIGN KEY (PLACE_ID) REFERENCES SP_PLACE (PLACE_ID)
);

CREATE TABLE IF NOT EXISTS SP_TRIP (
    TRIP_ID INT(19) NOT NULL PRIMARY KEY, 
    TYPE_ID INT(19), 
    START_DATE INT(5), 
    END_DATE INT(5), 
    OPIS_NUMBER INT(10), 
    DOCS_COUNT INT(10), 
    SORT INT(19) NOT NULL, 
    PLACE_ID INT(19) NOT NULL,
    FOREIGN KEY (TYPE_ID) REFERENCES DESCRIPTOR_VALUE (DESCRIPTOR_VALUE_ID),
    FOREIGN KEY (PLACE_ID) REFERENCES SP_PLACE (PLACE_ID)
);

CREATE ALIAS IF NOT EXISTS MD5 FOR "org.apache.commons.codec.digest.DigestUtils.md5Hex(java.lang.String)";
CREATE ALIAS IF NOT EXISTS GET_FUND_FULL_NUMBER FOR "ru.insoft.h2.stores.H2Functions.getFundFullNumber";
CREATE ALIAS IF NOT EXISTS GET_YEARS FOR "ru.insoft.h2.stores.H2Functions.getYears";
CREATE ALIAS IF NOT EXISTS SETVAL FOR "ru.insoft.h2.stores.H2Functions.setSequenceValue";

CREATE SEQUENCE IF NOT EXISTS SEQ_ADM_ACCESS_RULE START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_ADM_EMPLOYEE START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_ADM_GROUP START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_ADM_USER START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_DESCRIPTOR_GROUP START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_DESCRIPTOR_GROUP_ATTR START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_DESCRIPTOR_VALUE START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_DESCRIPTOR_VALUE_ATTR START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_CHANGE_FIELD START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_CHANGE_OP START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_DOCUMENT START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_NAME START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_ORGANIZATION START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_PLACE START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_REWARD START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;
CREATE SEQUENCE IF NOT EXISTS SEQ_SP_TRIP START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999 NOCYCLE CACHE 20;

CREATE OR REPLACE FORCE VIEW V_SP_LAST_CHANGE_OP (ID, ORGANIZATION_ID, ORG_NAME, USER_ID, USER_NAME, ACTION_ID, ACTION, ARCHIVE, ARCH_LEVEL, OP_DATE) 
    AS 
select op.OPERATION_ID as id, ld.ORGANIZATION_ID as ORGANIZATION_ID,  n.FULL_NAME as ORG_NAME,
    op.USER_ID as user_id, au.DISPLAYED_NAME as user_name, op.ACTION_ID as action_ID, ac.FULL_VALUE as ACTION,
    ar.FULL_VALUE as ARCHIVE, al.FULL_VALUE as ARCH_LEVEL,
    ld.dt as op_date
FROM SP_CHANGE_OPERATION op
  JOIN 
  (select ORGANIZATION_ID, MAX(OP_DATE) as dt from SP_CHANGE_OPERATION GROUP BY ORGANIZATION_ID) ld
  ON ld.ORGANIZATION_ID = op.ORGANIZATION_ID 
  AND ld.dt = op.OP_DATE
  JOIN DESCRIPTOR_VALUE ac ON op.ACTION_ID = ac.DESCRIPTOR_VALUE_ID
  JOIN ADM_USER au ON op.USER_ID = au.USER_ID
  JOIN SP_ORGANIZATION o on op.ORGANIZATION_ID = o.ORGANIZATION_ID
  JOIN SP_NAME n on n.ORGANIZATION_ID = o.ORGANIZATION_ID and n.SORT = 0
  JOIN SP_PLACE p on p.ORGANIZATION_ID = o.ORGANIZATION_ID
  LEFT OUTER JOIN DESCRIPTOR_VALUE ar on ar.DESCRIPTOR_VALUE_ID = p.ARCHIVE_ID
  LEFT OUTER JOIN DESCRIPTOR_VALUE al on al.DESCRIPTOR_VALUE_ID = p.LEVEL_ID;

CREATE OR REPLACE FORCE VIEW V_SP_ORG_NAME (ID, NAME) AS 
  select o.ORGANIZATION_ID as id, n.FULL_NAME as name from SP_ORGANIZATION o
  left join SP_NAME n on o.ORGANIZATION_ID = n.ORGANIZATION_ID and n.SORT = 0;

CREATE OR REPLACE FORCE VIEW V_SP_ORG_SEARCH (PLACE_ID, ORGANIZATION_ID, FULL_NAME, ARCHIVE_ID, PLACE, LEVEL_ID, FUNDFULL, FUND_PREFIX, FUND_NUMBER, FUND_SUFFIX, START_YEAR, END_YEAR, YEARS) AS 
select SP.PLACE_ID, SO.ORGANIZATION_ID, SN.FULL_NAME, SP.ARCHIVE_ID, 
  STORAGE_PACK.GET_STORE_PLACE(SP.PLACE_ID) as PLACE,
  SP.LEVEL_ID,
  STORAGE_PACK.GET_FUND_FULL_NUMBER(SP.FUND_NUMBER, SP.FUND_PREFIX, SP.FUND_SUFFIX) as 
  FUNDFULL, SP.FUND_PREFIX, SP.FUND_NUMBER, SP.FUND_SUFFIX,
  SP.START_YEAR as START_YEAR, 
  SP.END_YEAR as END_YEAR, 
  STORAGE_PACK.GET_YEARS(START_YEAR, END_YEAR) as YEARS
FROM SP_ORGANIZATION SO
  JOIN SP_NAME SN on SN.ORGANIZATION_ID = SO.ORGANIZATION_ID and SN.SORT = 0
  JOIN SP_PLACE SP on SP.ORGANIZATION_ID = SO.ORGANIZATION_ID
  LEFT OUTER JOIN DESCRIPTOR_VALUE AV on SP.ARCHIVE_ID = AV.DESCRIPTOR_VALUE_ID 
  ORDER BY SN.FULL_NAME;
